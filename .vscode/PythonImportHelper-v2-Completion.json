[
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras",
        "importPath": "tensorflow",
        "description": "tensorflow",
        "isExtraImport": true,
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras",
        "importPath": "tensorflow",
        "description": "tensorflow",
        "isExtraImport": true,
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras",
        "importPath": "tensorflow",
        "description": "tensorflow",
        "isExtraImport": true,
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "layers",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.evacuate_model",
        "description": "src.evacuate_model",
        "peekOfCode": "def main():\n    # Carregar modelo\n    model = keras.models.load_model(\"mnist_model.h5\")\n    # Carregar dados de teste\n    (_, _), (x_test, y_test) = keras.datasets.mnist.load_data()\n    x_test = x_test.astype(\"float32\") / 255.0\n    x_test = np.expand_dims(x_test, -1)\n    # Avaliar modelo\n    loss, acc = model.evaluate(x_test, y_test, verbose=2)\n    print(f\"Acur√°cia no teste: {acc*100:.2f}%\")",
        "detail": "src.evacuate_model",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.train_model",
        "description": "src.train_model",
        "peekOfCode": "def main():\n    # Carregar dados MNIST\n    (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n    x_train = x_train.astype(\"float32\") / 255.0\n    x_test = x_test.astype(\"float32\") / 255.0\n    # Remodelar para [amostras, 28, 28, 1]\n    x_train = np.expand_dims(x_train, -1)\n    x_test = np.expand_dims(x_test, -1)\n    # Construir modelo simples\n    model = keras.Sequential([",
        "detail": "src.train_model",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "app = FastAPI()\nmodel = keras.models.load_model(\"mnist_model.h5\")\n@app.post(\"/predict\")\nasync def predict(file: UploadFile = File(...)):\n    img = Image.open(io.BytesIO(await file.read())).convert('L').resize((28, 28))\n    img_array = np.array(img).astype('float32') / 255.0\n    img_array = 1.0 - img_array\n    img_array = np.expand_dims(img_array, axis=(0, -1))\n    prediction = model.predict(img_array)\n    predicted_digit = int(np.argmax(prediction[0]))",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "model = keras.models.load_model(\"mnist_model.h5\")\n@app.post(\"/predict\")\nasync def predict(file: UploadFile = File(...)):\n    img = Image.open(io.BytesIO(await file.read())).convert('L').resize((28, 28))\n    img_array = np.array(img).astype('float32') / 255.0\n    img_array = 1.0 - img_array\n    img_array = np.expand_dims(img_array, axis=(0, -1))\n    prediction = model.predict(img_array)\n    predicted_digit = int(np.argmax(prediction[0]))\n    return { \"predict\": predicted_digit }",
        "detail": "index",
        "documentation": {}
    }
]